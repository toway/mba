"""change_meetup_post_id_to_post_img

Revision ID: 1a430892d72c
Revises: 37df2a153359
Create Date: 2014-09-18 23:40:50.649000

"""

# revision identifiers, used by Alembic.
revision = '1a430892d72c'
down_revision = '37df2a153359'

from alembic import op
import sqlalchemy as sa

from alembic import context

import sqlite3


# from mba.alembic.env import  sqliteop



import  sqlite3

config = context.config



class SqliteOp():


    def __init__(self):

        url = config.get_section_option('app:mba', "sqlalchemy.url", None)



        if url.startswith('sqlite:///'):
            self.dbpath =  url.split('///')[1]
        else:
            raise EnvironmentError("Not Sqlite database")


        self.conn = sqlite3.connect(self.dbpath)
        self.cursor = self.conn.cursor()


    def __del__(self):
        self.cursor.close()
        self.conn.close()



    def save_table_data(self, tablename):

        self.cursor.execute("SELECT * FROM  %s "  % tablename)
        self.conn.commit()
        all = self.cursor.fetchall()
        return all

    def delete_table(self, tablename):
        self.cursor.execute("DELETE FROM %s " % tablename);
        self.conn.commit()


    def restore_table_data(self, tablename, datalist):

        col = ['?'] * len( datalist[0] )
        col2 = ','.join(col )

        self.cursor.executemany("""INSERT INTO %s VALUES (%s)""" % (tablename,col2) , datalist )

        self.conn.commit()

sqliteop = SqliteOp()



def alter_table_value(colnum, data):


    def syntax(col):
        orginal = col[colnum]
        # change post_id<int> to post_img<url>
        sqliteop.cursor.execute("SELECT name FROM nodes where id=%d" % orginal)
        one = sqliteop.cursor.fetchone()
        # print one
        col = list(col)
        col[colnum] = "/images/%s/image" % (one[0])
        col = tuple(col)

        return col


    return map(syntax, data)



def upgrade():
    ### commands auto generated by Alembic - please adjust! ###



    saved = sqliteop.save_table_data('acts')

    saved = alter_table_value(4, saved)



    op.drop_table('acts')


    op.create_table('acts',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('status', sa.INTEGER(), nullable=False),
    sa.Column('headline', sa.INTEGER(), nullable=False),
    sa.Column('meetup_type', sa.INTEGER(), nullable=True),
    sa.Column('poster_img', sa.String(50), nullable=True),
    sa.Column('city_id', sa.INTEGER(), nullable=True),
    sa.Column('meetup_start_time', sa.DATETIME(), nullable=True),
    sa.Column('meetup_finish_time', sa.DATETIME(), nullable=True),
    sa.Column('enroll_finish_time', sa.DATETIME(), nullable=True),
    sa.Column('enroll_start_time', sa.DATETIME(), nullable=True),
    sa.Column('location', sa.TEXT(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=True),
    sa.Column('longitude', sa.FLOAT(), nullable=True),
    sa.Column('zoomlevel', sa.INTEGER(), nullable=True),
    sa.Column('limit_num', sa.INTEGER(), nullable=True),
    sa.Column('pay_count', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['city_id'], [u'city.id'], ),
    sa.ForeignKeyConstraint(['id'], [u'documents.id'], ),
    sa.ForeignKeyConstraint(['meetup_type'], [u'meetup_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )



    sqliteop.restore_table_data('acts', saved)


    ### end Alembic commands ###


def downgrade():

    return


    op.create_table('acts',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('status', sa.INTEGER(), nullable=False),
    sa.Column('headline', sa.INTEGER(), nullable=False),
    sa.Column('meetup_type', sa.INTEGER(), nullable=True),
    sa.Column('poster_id', sa.INTEGER(), nullable=True),
    sa.Column('city_id', sa.INTEGER(), nullable=True),
    sa.Column('meetup_start_time', sa.DATETIME(), nullable=True),
    sa.Column('meetup_finish_time', sa.DATETIME(), nullable=True),
    sa.Column('enroll_finish_time', sa.DATETIME(), nullable=True),
    sa.Column('enroll_start_time', sa.DATETIME(), nullable=True),
    sa.Column('location', sa.TEXT(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=True),
    sa.Column('longitude', sa.FLOAT(), nullable=True),
    sa.Column('zoomlevel', sa.INTEGER(), nullable=True),
    sa.Column('limit_num', sa.INTEGER(), nullable=True),
    sa.Column('pay_count', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['city_id'], [u'city.id'], ),
    sa.ForeignKeyConstraint(['id'], [u'documents.id'], ),
    sa.ForeignKeyConstraint(['meetup_type'], [u'meetup_types.id'], ),
    sa.ForeignKeyConstraint(['poster_id'], [u'images.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    ### end Alembic commands ###

// Generated by CoffeeScript 1.8.0
(function() {
  $(function() {
    $.widget("mbawidget.metadialog", {
      options: {
        name: 'metadialog',
        title: null,
        desc: null,
        content: 'Nothing here!',
        position: 'element_right',
        remoteContent: {
          type: null,
          url: null,
          rootVar: null
        },
        width: null,
        buttons: [],
        onDialogBuilt: null
      },
      defaultButtons: [
        {
          name: 'ok',
          clsNames: 'btn btn-xs btn-primary',
          value: '保&nbsp;&nbsp;存',
          handler: 'onOk'
        }, {
          name: 'cancel',
          clsNames: 'btn btn-xs btn-default',
          value: '取&nbsp;&nbsp;消',
          handler: 'onCancel'
        }
      ],
      dialog: null,
      visible: false,
      _create: function() {
        this._on(this.element, {
          'click': "toggle"
        });
        this._on(this.document, {
          'click': "hideDialog"
        });
      },
      _destroy: function() {
        var index, item, _i, _len, _ref;
        this._off(this.element);
        this._off(this.document);
        _ref = $.dialog.find('button');
        for (item = _i = 0, _len = _ref.length; _i < _len; item = ++_i) {
          index = _ref[item];
          this._off(item);
        }
        return this.dialog.remove();
      },
      onOk: function() {
        console.log('onOk');
        this.hideDialog();
        return false;
      },
      onCancel: function() {
        console.log('onCancel');
        this.hideDialog();
        return false;
      },
      toggle: function() {
        if (this.visible) {
          this.hideDialog();
        } else {
          this.showDialog();
        }
        return false;
      },
      calcPosition: function() {
        var d, dheight, dwidth, height, offset, w, width;
        offset = this.element.offset();
        height = this.element.height();
        width = this.element.width();
        dwidth = this.dialog.width();
        dheight = this.dialog.height();
        offset.top += +10;
        switch (this.options.position) {
          case 'element_bottom':
            offset.top += height + 10;
            break;
          case 'element_right':
            offset.left += width + 10;
            break;
          case 'element_left':
            offset.left -= dwidth / 2;
            break;
          case 'element_top':
            offset.top -= dheight / 2;
            break;
          case 'docoument_center':
            w = $(window);
            d = $(document);
            offset = {
              top: d.height() - w.height() / 2 - dheight / 2,
              left: d.width() - w.width() / 2 - dwidth / 2
            };
        }
        return offset;
      },
      showDialog: function() {
        var offset, self;
        console.log("showDialog");
        self = this;
        if (!this.dialog) {
          if (this.options.remoteContent.type === !null) {
            this.buildDialog(function() {
              var offset;
              offset = this.calcPosition();
              self.dialog.show().offset(offset);
              self.visible = true;
            });
            return;
          } else {
            this.buildDialog();
          }
        }
        offset = this.calcPosition();
        this.dialog.show().offset(offset);
        this.visible = true;
      },
      hideDialog: function(e) {
        var hide;
        console.log('before hideDialog');
        hide = false;
        if (this.dialog) {
          if (e) {
            if (this.dialog.find(e.target).length === 0) {
              hide = true;
            }
          } else {
            hide = true;
          }
        }
        if (hide) {
          console.log("hideDialog:");
          this.dialog.hide();
          this.visible = false;
        }
      },
      buildTitle: function() {
        var desc, title;
        desc = "";
        if (this.options.desc) {
          desc = "<small>(" + this.options.desc + ")</small>";
        }
        title = $("<div/>").addClass("mba-dialog-title").html(this.options.title + desc);
        return title.prop('outerHTML');
      },
      hookRemoteContent: function(content) {
        'After got remote content, hook it to the dialog content area or other items';
        this.dialog.find('.mba-dialog-content').html(content);
        return false;
      },
      buildContent: function() {
        var content, origalContent, remoteContent, self;
        remoteContent = this.options.remoteContent;
        self = this;
        content = $("<div/>").addClass("mba-dialog-content").html(' Loading... ');
        if (remoteContent.type === 'json') {
          $.get(remoteContent.url, function(ret) {
            var retdata, rootVar;
            if (ret.errcode === ret.SUCCESS) {
              retdata = ret.retval;
              rootVar = self.options.remoteContent.rootVar;
              if (rootVar) {
                retdata = ret.retval[rootVar];
              }
              self.hookRemoteContent(retdata);
            } else {
              alert(ret.errmsg);
            }
          });
        } else if (remoteContent.type === 'script') {
          $.getScript(remoteContent.url, function(ret) {
            var obj;
            eval(ret);
            obj = window[remoteContent.rootVar];
            self.hookRemoteContent(obj);
          });
        } else if (remoteContent.type === null) {
          origalContent = this.options.content;
          if (origalContent instanceof jQuery) {
            origalContent.show();
          }
          content.html(origalContent);
        } else {
          alert("Not supported remoteContent type");
        }
        return content.prop("outerHTML");
      },
      buildFooter: function() {
        var arr, btnhtml, button, buttons, defaultButtons, footer, found, i, idx, index, item, j, jdx, newButtons, _i, _j, _k, _len, _len1, _len2;
        buttons = this.options.buttons;
        defaultButtons = this.defaultButtons;
        newButtons = defaultButtons.slice(0);
        for (idx = _i = 0, _len = buttons.length; _i < _len; idx = ++_i) {
          i = buttons[idx];
          found = false;
          for (jdx = _j = 0, _len1 = defaultButtons.length; _j < _len1; jdx = ++_j) {
            j = defaultButtons[jdx];
            if (i.name === j.name) {
              newButtons[jdx] = $.extend(j, i);
              found = true;
              break;
            }
          }
          if (!found) {
            newButtons.push(i);
          }
        }
        this.options.buttons = newButtons;
        arr = [];
        for (index = _k = 0, _len2 = newButtons.length; _k < _len2; index = ++_k) {
          item = newButtons[index];
          button = $("<button/>").addClass(item.clsNames).attr("name", item.name).val(item.name).html(item.value).attr("type", "button");
          btnhtml = button.prop('outerHTML');
          arr.push(btnhtml);
        }
        footer = $("<div/>").addClass("mba-dialog-footer").append(arr.join("&nbsp;&nbsp;&nbsp;"));
        return footer.prop('outerHTML');
      },
      buildDialog: function(cb) {
        var content, footer, index, item, title, _i, _len, _ref;
        title = this.buildTitle();
        content = this.buildContent();
        footer = this.buildFooter();
        this.dialog = $("<div/>").addClass("mba-dialog").append(title + content + footer).appendTo(this.document.find("body"));
        if (this.options.width) {
          this.dialog.css("width", this.options.width);
        }
        _ref = this.dialog.find("button");
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          item = _ref[index];
          this._on(item, {
            'click': this.options.buttons[index].handler
          });
        }
        this.postBuildDialog();
        if (cb) {
          cb();
        }
        return false;
      },
      postBuildDialog: function() {
        if (this.options.onDialogBuilt) {
          this.options.onDialogBuilt.apply(this, arguments);
        }
        return false;
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.structdata", $.mbawidget.metadialog, {
      options: {
        name: 'structdata',
        items: null
      },
      buildStructContent: function() {
        return ",".join(this.options.items);
      },
      buildContent: function() {
        var div;
        if (this.options.remoteContent.type === null) {
          div = $("<div>").addClass("mba-dialog-content").append(this.buildStructContent());
          return div.prop("outerHTML");
        }
        return this._super();
      },
      hookRemoteContent: function(content) {
        var content2;
        this.options.items = content;
        content2 = this.buildStructContent();
        return this.dialog.find('.mba-dialog-content').html(content2);
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.plain", $.mbawidget.structdata, {
      options: {
        name: 'plain2',
        items: null,
        columns: 2
      },
      buildCell: function(row, col, item) {
        return item;
      },
      buildStructContent: function() {
        var col, cols, item, len, row, rows, table, td, tr, _i, _j, _ref, _ref1;
        table = "";
        cols = this.options.columns;
        len = this.options.items.length;
        rows = (len - 1) / cols + 1;
        for (row = _i = 0, _ref = rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
          tr = "";
          for (col = _j = 0, _ref1 = cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            if (row * cols + col < len) {
              item = this.options.items[row * cols + col];
              td = "<td class='mba-dialog-item'>" + this.buildCell(row, col, item) + "</td>";
            } else {
              td = "<td class='mba-dialog-item'></td>";
              break;
            }
            tr += td;
          }
          tr = "<tr>" + tr + "</tr>";
          table += tr;
        }
        table = "<form><table>" + table + "</table></form>";
        return table;
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.radiocheck", $.mbawidget.plain, {
      options: {
        name: 'radiocheck'
      },
      onOk: function() {
        var val;
        val = this.dialog.find(":radio:checked").val();
        this.element.val(val);
        return this._super();
      },
      buildCell: function(row, col, item) {
        var id, name, td;
        name = this.options.name;
        id = this.options.title + name + item;
        td = "<input type='radio' id='" + id + "' name='" + name + "' value='" + item + "'/>";
        td += "<label for='" + id + "'>" + item + "</label>";
        return td;
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.multicheck", $.mbawidget.plain, {
      options: {
        name: 'multicheck',
        maxcount: 3
      },
      onOk: function() {
        var checked, item, val;
        checked = this.dialog.find(":checkbox:checked");
        val = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = checked.length; _i < _len; _i++) {
            item = checked[_i];
            _results.push($(item).val());
          }
          return _results;
        })()).slice(0, this.options.maxcount);
        this.element.val(val.join(","));
        return this._super();
      },
      buildCell: function(row, col, item) {
        var id, name, td;
        name = this.options.name;
        id = this.options.title + name + item;
        td = "<input type='checkbox'  id='" + id + "' name='" + name + "' value='" + item + "'/>";
        td += "<label for='" + id + "'>" + item + "</label>";
        return td;
      }
    });
  });

  $(function() {
    $.widget("mbawidget.tree", $.mbawidget.structdata, {
      options: {
        name: 'tree',
        maxtreelevel: 2
      },
      buildStructContent: function() {
        var content, index, item, items, _i, _len;
        content = "";
        items = this.options.items;
        for (index = _i = 0, _len = items.length; _i < _len; index = ++_i) {
          item = items[index];
          item = "<a href='javascript:void(0)' data-index=" + index + " class='mba-dt-l1'>" + item.name + "</a>|";
          content += item;
        }
        content += "<hr/><div class='mba-dt-l2'></div>";
        return content;
      },
      postBuildDialog: function() {
        this._on(this.dialog, {
          'click a': '_buildL2'
        });
        return false;
      },
      buildCell: function(row, col, item) {
        return item;
      },
      _buildL2: function(e) {
        var col, cols, idx, item, len, row, rows, section, subitems, subnodes, table, td, tr, _i, _j, _ref, _ref1;
        idx = parseInt($(e.target).attr("data-index"));
        subitems = this.options.items[idx].items;
        table = "";
        cols = 3;
        len = subitems.length;
        rows = (len - 1) / cols + 1;
        for (row = _i = 0, _ref = rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
          tr = "";
          for (col = _j = 0, _ref1 = cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            if (row * cols + col < len) {
              item = subitems[row * cols + col].name;
              td = "<td class='mba-di-l2'>" + this.buildCell(row, col, item) + "</td>";
            } else {
              td = "<td class='mba-di-l2'></td>";
              break;
            }
            tr += td;
          }
          tr = "<tr>" + tr + "</tr>";
          table += tr;
        }
        subnodes = this.dialog.find('.mba-dt-l2');
        table = "<table id='subidx-" + idx + "'>" + table + "</table>";
        section = subnodes.find('table[id=subidx-' + idx + ']');
        subnodes.find("table[id^=subidx]").hide();
        if (section.length === 0) {
          subnodes.append(table);
        }
        ({
          "else": section.show()
        });
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.radiotree", $.mbawidget.tree, {
      options: {
        name: 'radiotree'
      },
      onOk: function() {
        var val;
        val = this.dialog.find(":radio:checked").val();
        this.element.val(val);
        return this._super();
      },
      buildCell: function(row, col, item) {
        var id, name, td;
        name = this.options.name;
        id = this.options.title + name + item;
        td = "<input type='radio' id='" + id + "' name='" + name + "' value='" + item + "'/>";
        td += "<label for='" + id + "'>" + item + "</label>";
        return td;
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.multichecktree", $.mbawidget.tree, {
      options: {
        name: 'multichecktree',
        maxcheckNumAllow: 3
      },
      onOk: function() {
        var checked, item, val;
        checked = this.dialog.find(":checkbox:checked");
        val = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = checked.length; _i < _len; _i++) {
            item = checked[_i];
            _results.push($(item).val());
          }
          return _results;
        })()).slice(0, this.options.maxcheckNumAllow);
        this.element.val(val.join(","));
        return this._super();
      },
      buildCell: function(row, col, item) {
        var id, name, td;
        name = this.options.name;
        id = this.options.title + name + item;
        td = "<input type='checkbox'  id='" + id + "' name='" + name + "' value='" + item + "'/>";
        td += "<label for='" + id + "'>" + item + "</label>";
        return td;
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.textareadialog", $.mbawidget.metadialog, {
      options: {
        name: 'textareadialog',
        rows: 3,
        width: 200,
        submit: {
          method: 'post',
          url: null,
          params: null,
          callback: null
        }
      },
      submitCallback: function() {
        var cb, retobj;
        console.log(arguments);
        console.log(arguments[0]);
        console.log(arguments[1]);
        console.log(arguments[2]);
        cb = this.options.submit.callback;
        if (cb) {
          cb.apply(this, arguments);
        } else {
          retobj = arguments[0];
          if (retobj.errcode !== retobj.SUCCESS) {
            alert(retobj.errmsg);
          } else {
            this.hideDialog();
            this.dialog.find('textarea').val('');
          }
        }
      },
      onOk: function() {
        var content, options, self;
        console.log('onOk in ' + this.options.name);
        content = this.dialog.find('textarea').val();
        self = this;
        if (this.options.submit.url) {
          console.log(this.options.submit.params);
          options = $.extend(this.options.submit.params, {
            content: content
          });
          console.log(options);
          return $.post(this.options.submit.url, options, function() {
            return self.submitCallback.apply(self, arguments);
          });
        }
      },
      buildContent: function() {
        var content, textarea;
        content = $("<div/>").addClass("mba-dialog-content");
        textarea = "<textarea type='input' class='form-control' rows=" + this.options.rows + "></textarea>";
        return (content.html(textarea)).prop("outerHTML");
      }
    });
  });

  $(function() {
    return $.widget("mbawidget.alertinfo", $.mbawidget.metadialog, {
      options: {
        name: 'alertinfo',
        width: 400
      }
    });
  });

}).call(this);

//# sourceMappingURL=mba_widgets.js.map

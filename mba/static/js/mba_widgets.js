// Generated by CoffeeScript 1.8.0
(function() {
  $(function() {
    $.widget("mbawidget.base", {
      options: {
        name: 'basewidget',
        title: null,
        item: {
          type: 'local',
          url: null,
          "var": null
        },
        items: null,
        width: null,
        buttons: [
          {
            name: 'save',
            clsNames: 'btn btn-xs btn-primary',
            value: '保&nbsp;&nbsp;存',
            handler: 'save'
          }, {
            name: 'cancel',
            clsNames: 'btn btn-xs btn-default',
            value: '取&nbsp;&nbsp;消',
            handler: 'cancel'
          }
        ]
      },
      dialog: null,
      visible: false,
      _create: function() {
        this._on(this.element, {
          'click': "toggle"
        });
        this._on(this.document, {
          'click': "hideDialog"
        });
      },
      _destroy: function() {
        var index, item, _i, _len, _ref;
        this._off(this.element);
        this._off(this.document);
        _ref = $.dialog.find('button');
        for (item = _i = 0, _len = _ref.length; _i < _len; item = ++_i) {
          index = _ref[item];
          this._off(item);
        }
        return this.dialog.remove();
      },
      save: function() {
        console.log('save');
        this.hideDialog();
        return false;
      },
      cancel: function() {
        console.log('cancel');
        this.hideDialog();
        return false;
      },
      toggle: function() {
        if (this.visible) {
          this.hideDialog();
        } else {
          this.showDialog();
        }
        return false;
      },
      showDialog: function() {
        var offset, self;
        console.log("showDialog");
        offset = this.element.offset();
        offset.top += this.element.height();
        self = this;
        if (!this.dialog) {
          this._buildDialog(function() {
            self.dialog.show().offset(offset);
            self.visible = true;
            return false;
          });
        } else {
          this.dialog.show().offset(offset);
          this.visible = true;
        }
        return false;
      },
      hideDialog: function(e) {
        var hide;
        console.log('before hideDialog');
        hide = false;
        if (this.dialog) {
          if (e) {
            if (this.dialog.find(e.target).length === 0) {
              hide = true;
            }
          } else {
            hide = true;
          }
        }
        if (hide) {
          console.log("hideDialog:");
          this.dialog.hide();
          this.visible = false;
        }
      },
      buildContent: function() {
        return "NeedSubclass";
      },
      _buildDialog: function(cb) {
        var self, type;
        type = this.options.item.type;
        self = this;
        if (type === 'script') {
          $.getScript(this.options.item.url, function(ret) {
            eval(ret);
            self.options.items = window[self.options.item["var"]];
            self.buildDialog();
            if (cb != null) {
              return cb();
            }
          });
        } else {
          this.buildDialog();
        }
      },
      buildDialog: function() {
        var arr, btnhtml, button, buttons, content, footer, index, item, title, _i, _j, _len, _len1, _ref;
        console.log('buildDialog:');
        buttons = this.options.buttons;
        arr = [];
        for (index = _i = 0, _len = buttons.length; _i < _len; index = ++_i) {
          item = buttons[index];
          button = $("<button/>").addClass(item.clsNames).attr("name", item.name).val(item.name).html(item.value).attr("type", "button");
          btnhtml = button.prop('outerHTML');
          arr.push(btnhtml);
        }
        title = $("<div/>").addClass("mba-dialog-title").html(this.options.title);
        content = $("<div/>").addClass("mba-dialog-content").append(this.buildContent());
        footer = $("<div/>").addClass("mba-dialog-footer").append(arr.join("&nbsp;&nbsp;&nbsp;"));
        this.dialog = $("<div/>").addClass("mba-dialog").append(title[0]).append(content[0]).append(footer[0]).appendTo(this.document.find("body"));
        if (this.options.width) {
          this.dialog.css("width", this.options.width);
        }
        _ref = this.dialog.find("button");
        for (index = _j = 0, _len1 = _ref.length; _j < _len1; index = ++_j) {
          item = _ref[index];
          this._on(item, {
            'click': this.options.buttons[index].handler
          });
        }
        return false;
      }
    });
  });

  $(function() {
    $.widget("mbawidget.plain", $.mbawidget.base, {
      options: {
        name: 'plainwidget',
        columns: 2
      },
      buildContent: function() {
        var col, cols, item, len, row, rows, table, td, tr, _i, _j, _ref, _ref1;
        table = "";
        cols = this.options.columns;
        len = this.options.items.length;
        rows = (len - 1) / cols + 1;
        for (row = _i = 0, _ref = rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
          tr = "";
          for (col = _j = 0, _ref1 = cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            if (row * cols + col < len) {
              item = this.options.items[row * cols + col];
              td = "<td class='mba-dialog-item'>" + this.buildCell(item) + "</td>";
            } else {
              td = "<td class='mba-dialog-item'></td>";
              break;
            }
            tr += td;
          }
          tr = "<tr>" + tr + "</tr>";
          table += tr;
        }
        table = "<form><table>" + table + "</table></form>";
        return table;
      }
    });
  });

  $(function() {
    $.widget("mbawidget.radiocheck", $.mbawidget.plain, {
      options: {
        name: 'radiocheck'
      },
      save: function() {
        var val;
        val = this.dialog.find(":radio:checked").val();
        this.element.val(val);
        return this._super();
      },
      buildCell: function(item) {
        var td;
        td = "<input type='radio'  name='" + this.options.name + "' value='" + item + "'/>" + item;
        return td;
      }
    });
  });

  $(function() {
    $.widget("mba.multicheck", $.mbawidget.plain, {
      options: {
        name: 'multicheck'
      },
      save: function() {
        var checked, item, val;
        checked = this.dialog.find(":checkbox:checked");
        val = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = checked.length; _i < _len; _i++) {
            item = checked[_i];
            _results.push($(item).val());
          }
          return _results;
        })();
        this.element.val(val.join(","));
        return this._super();
      },
      buildCell: function(item) {
        var td;
        td = "<input type='checkbox'  name='" + this.options.name + "' value='" + item + "'/>" + item;
        return td;
      }
    });
  });

  $(function() {
    $.widget("mbawidget.radiotree", $.mbawidget.radiocheck, {
      options: {
        name: 'treewidget'
      },
      buildContent: function() {
        var content, index, item, items, _i, _len;
        content = "";
        items = this.options.items;
        for (index = _i = 0, _len = items.length; _i < _len; index = ++_i) {
          item = items[index];
          item = "<a href='#' data-index=" + index + " class='mba-dt-l1'>" + item.name + "</a>|";
          content += item;
        }
        content += "<hr/><div class='subnodes'></div>";
        return content;
      },
      buildDialog: function() {
        this._super();
        this._on(this.dialog, {
          'click a': '_buildL2'
        });
        return false;
      },
      _buildL2: function(e) {
        var col, cols, idx, item, len, row, rows, subitems, table, td, tr, _i, _j, _ref, _ref1;
        idx = parseInt($(e.target).attr("data-index"));
        subitems = this.options.items[idx].items;
        table = "";
        cols = 3;
        len = subitems.length;
        rows = (len - 1) / cols + 1;
        for (row = _i = 0, _ref = rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
          tr = "";
          for (col = _j = 0, _ref1 = cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            if (row * cols + col < len) {
              item = subitems[row * cols + col].name;
              td = "<td class='mba-di-l2'>" + this.buildCell(item) + "</td>";
            } else {
              td = "<td class='mba-di-l2'></td>";
              break;
            }
            tr += td;
          }
          tr = "<tr>" + tr + "</tr>";
          table += tr;
        }
        table = "<form><table>" + table + "</table></form>";
        return this.dialog.find('.subnodes').html(table);
      }
    });
  });

}).call(this);

//# sourceMappingURL=mba_widgets.js.map
